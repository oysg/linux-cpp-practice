1.入门题（5题）
(1) 输入处理（重要）：HJ5.进制转换

描述
写出一个程序，接受一个十六进制的数，输出该数值的十进制表示。

数据范围：保证结果在 1≤n≤231−1

输入一个十六进制的数值字符串。

输出描述：
输出该数值的十进制字符串。不同组的测试用例用\n隔开。

示例1
输入：

0xAA
输出：

170


(2) 排列组合：(牛客搜索)NC61.两数之和
给出一个整数数组，请在数组中找出两个加起来等于目标值的数，你给出的函数twoSum 需要返回这两个数字的下标（index1，index2），需要满足 index1 小于index2
注意：下标是从1开始的,假设给出的数组中只存在唯一解

1
2
给出的数组为 {2, 7, 11, 15},目标值为9
输出 ndex1=1, index2=2


(3) 快速排序：HJ3.明明的随机数

题目描述
明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作。

输入格式
输入2行，第1行为1个正整数，表示所生成的随机数的个数：N

第2行有N个用空格隔开的正整数，为所产生的随机数。

输出格式
输出也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。

样例输入
10
20 40 32 67 40 20 89 300 400 15
样例输出
8
15 20 32 40 67 89 300 400



(4) 哈希表：HJ10.字符个数统计

编写一个函数，计算字符串中含有的不同字符的个数。字符在ACSII码范围内(0~127)，换行表示结束符，不算在字符里。不在范围内的不作统计。多个相同的字符只计算一次

例如，对于字符串abaca而言，有a、b、c三种不同的字符，因此输出3。

输入描述:

输入一行没有空格的字符串。

输出描述:

输出范围在(0~127)字符的个数。

示例1

输入

abc

输出

3


(5) 递归：NC68.跳台阶

一、跳台阶
描述
一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法（先后次序不同算不同的结果）。

数据范围：1≤n≤40
要求：时间复杂度：O(n) ，空间复杂度： O(1)
示例1
输入：2
返回值：2
说明：青蛙要跳上两级台阶有两种跳法，分别是：先跳一级，再跳一级或者直接跳两级。因此答案为2
示例2
输入：7
返回值：21

1 1
2 2
3 3
4 5



（带*题目与第一第二道题目难度相近，以下题目基本覆盖大部分知识点）
2.字符串操作（6题）
(1) HJ17.坐标移动

描述
开发一个坐标计算工具， A表示向左移动，D表示向右移动，W表示向上移动，S表示向下移动。
从（0,0）点开始移动，从输入字符串里面读取一些坐标，并将最终输入结果输出到输出文件里面。

输入：
合法坐标为A(或者D或者W或者S) + 数字（两位以内）
坐标之间以;分隔。
非法坐标点需要进行丢弃。如AA10; A1A; %; YAD; 等。
下面是一个简单的例子 如：

A10;S20;W10;D30;X;A1A;B10A11;;A10;
处理过程：
起点（0,0）

A10 = （-10,0）

S20 = (-10,-20)

W10 = (-10,-10)

D30 = (20,-10)

x = 无效

A1A = 无效

B10A11 = 无效

一个空 不影响

A10 = (10,-10)

结果 （10， -10）

数据范围：每组输入的字符串长度满足 1≤n≤10000 ，坐标保证满足 -231≤x, y≤231 -1，且数字部分仅含正数
输入描述：
一行字符串

输出描述：
最终坐标，以逗号分隔


(2) HJ20.密码验证合格程序

描述
密码要求:

1.长度超过8位

2.包括大小写字母.数字.其它符号,以上四种至少三种

3.不能有长度大于2的包含公共元素的子串重复 （注：其他符号不含空格或换行）

数据范围：输入的字符串长度满足 
1
≤
�
≤
100
 
1≤n≤100 
输入描述：
一组字符串。

输出描述：
如果符合要求输出：OK，否则输出NG

示例1
输入：
021Abc9000
021Abc9Abc1
021ABC9000
021$bc9000
复制
输出：
OK
NG
NG
OK


(3) *HJ23.删除字符串中出现次数最少的字符

描述
实现删除字符串中出现次数最少的字符，若出现次数最少的字符有多个，则把出现次数最少的字符都删除。输出删除这些单词后的字符串，字符串中其它字符保持原来的顺序。

数据范围：输入的字符串长度满足
1≤n≤20

1≤n≤20 ，保证输入的字符串中仅出现小写字母
输入描述：
字符串只包含小写英文字母, 不考虑非法输入，输入的字符串长度小于等于20个字节。

输出描述：
删除字符串中出现次数最少的字符后的字符串。

示例1

输入：aabcddd
输出：aaddd



(4) *HJ33.整数与IP地址间的转换
举例：一个ip地址为10.0.3.193
每段数字 相对应的二进制数
10 00001010
0 00000000
3 00000011
193 11000001

组合起来即为：00001010 00000000 00000011 11000001,转换为10进制数就是：167773121，即该IP地址转换后的数字就是它了。

输入描述：
1 输入IP地址

2 输入10进制型的IP地址

输出描述：
1 输出转换成10进制的IP地址

2 输出转换后的IP地址

题意分析
利用好scanf和左移8位运算。



(5) HJ101.输入整型数组和排序标识

HJ101 输入整型数组和排序标识，对其元素按照升序或降序进行排序
描述
输入整型数组和排序标识，对其元素按照升序或降序进行排序

数据范围： 1≤n≤1000 1≤n≤1000 ，元素大小满足 0≤val≤100000 0≤val≤100000

输入描述：
第一行输入数组元素个数
第二行输入待排序的数组，每个数用空格隔开
第三行输入一个整数 0 或 1。0 代表升序排序，1 代表降序排序

输出描述：
输出排好序的数字

示例 1

输入：
8
1 2 4 9 3 55 64 25
0
输出：
1 2 3 4 9 25 55 64
1
2
3
4
5
6
示例 2

输入：
5
1 2 3 4 5
1
输出：
5 4 3 2 1


(6) *HJ106.字符串逆序

描述
将一个字符串str的内容颠倒过来，并输出。str的长度不超过100个字符。

输入描述：
输入一个字符串，可以有空格

输出描述：
输出逆序的字符串


3.排序（5题）
(1) HJ8.合并表记录

题目描述
①描述
数据表记录包含表索引index和数值value（int范围的正整数），请对表索引相同的记录进行合并，即将相同索引的数值进行求和运算，输出按照index值升序进行输出。
提示:
0 <= index <= 11111111
1 <= value <= 100000
②输入描述
先输入键值对的个数n（1 <= n <= 500）
接下来n行每行输入成对的index和value值，以空格隔开
③输出描述
输出合并后的键值对（多行）
④示例一
输入： 4
    0 1
    0 2
    1 2
    3 4
输出： 0 3
    1 2
    3 4
④示例二
输入： 3
    0 1
    0 2
    8 9
    
输出： 0 3
    8 9






(2) *HJ14.字符串排序

描述
给定 n 个字符串，请对 n 个字符串按照字典序排列。
数据范围： 1<=n<=1000,字符串长度满足 1<=len<=100
②输入描述
输入第一行为一个正整数n(1<=n<=1000),下面n行为n个字符串(字符串长度<=100),字符串中只含有大小写字母。
③输出描述
数据输出n行，输出结果为按照字典序排列的字符串。
④示例一
输入： 9
    cap
    to
    cat
    card
    two
    too
    up
    boat
    boot
输出： boat
    boot
    cap
    card
    cat
    to
    too
    two
    up




(3) HJ27.查找兄弟单词

描述
定义一个单词的“兄弟单词”为：交换该单词字母顺序（注：可以交换任意次），而不添加、删除、修改原有的字母就能生成的单词。
兄弟单词要求和原来的单词不同。例如： ab 和 ba 是兄弟单词。 ab 和 ab 则不是兄弟单词。
现在给定你 n 个单词，另外再给你一个单词 x ，让你寻找 x 的兄弟单词里，按字典序排列后的第 k 个单词是什么？
注意：字典中可能有重复单词。
数据范围：1≤n≤1000 ，输入的字符串长度满足 1≤len(str)≤10 ，1≤k<n
输入描述：
输入只有一行。 先输入字典中单词的个数n，再输入n个单词作为字典单词。 然后输入一个单词x 最后后输入一个整数k
输出描述：
第一行输出查找到x的兄弟单词的个数m 第二行输出查找到的按照字典顺序排序后的第k个兄弟单词，没有符合第k个的话则不用输出。


(4) *NC37.合并区间

描述
给出一组区间，请合并所有重叠的区间。
请保证合并后的区间按区间起点升序排列。

数据范围：区间组数 
0
≤
�
≤
2
×
1
0
5
0≤n≤2×10 
5
 ，区间内 的值都满足 
0
≤
�
�
�
≤
2
×
1
0
5
0≤val≤2×10 
5
 
要求：空间复杂度 
()O(n)，
时间复杂度 ()O(nlogn)
进阶：空间复杂度 ()O(val)，
时间复杂度()O(val)
示例1
输入：
[[10,30],[20,60],[80,100],[150,180]]
复制
返回值：
[[10,60],[80,100],[150,180]]
复制
示例2
输入：
[[0,10],[10,20]]
复制
返回值：
[[0,20]]


(5) *HJ68.成绩排序

题目描述：
查找和排序

题目：输入任意（用户，成绩）序列，可以获得成绩从高到低或从低到高的排列,相同成绩
都按先录入排列在前的规则处理。

例示：
jack      70
peter     96
Tom       70
smith     67

从高到低  成绩 
peter     96 
jack      70 
Tom       70 
smith     67

从低到高

smith     67

jack      70

Tom       70 

peter     96

注：0代表从高到低，1代表从低到高

本题含有多组输入数据！

输入描述：
输入多行，先输入要排序的人的个数，然后分别输入他们的名字和成绩，以一个空格隔开

输出描述：
按照指定方式输出名字和成绩，名字和成绩之间以一个空格隔开

示例：
输入：

3
0
fang 90
yang 50
ning 70
输出：

fang 90
ning 70
yang 50




4.栈（2题）
(1) NC52.括号序列

描述
给出一个仅包含字符'(',')','{','}','['和']',的字符串，判断给出的字符串是否是合法的括号序列
括号必须以正确的顺序关闭，"()"和"()[]{}"都是合法的括号序列，但"(]"和"([)]"不合法。

数据范围：字符串长度 
0
≤
�
≤
10000
0≤n≤10000
要求：空间复杂度 O(n)，
时间复杂度 O(n)

示例1
输入：
"["
复制
返回值：
false
复制
示例2
输入：
"[]"
复制
返回值：
true



(2) *leetcode 1614.括号的最大嵌套深度

如果字符串满足以下条件之一，则可以称之为 有效括号字符串（valid parentheses string，可以简写为 VPS）：

字符串是一个空字符串 ""，或者是一个不为 "(" 或 ")" 的单字符。

字符串可以写为 AB（A 与 B 字符串连接），其中 A 和 B 都是 有效括号字符串 。

字符串可以写为 (A)，其中 A 是一个 有效括号字符串 。
类似地，可以定义任何有效括号字符串 S 的 嵌套深度 depth(S)：

depth("") = 0

depth(C) = 0，其中 C 是单个字符的字符串，且该字符不是 “(” 或者 “)”

depth(A + B) = max(depth(A), depth(B))，其中 A 和 B 都是 有效括号字符串

depth("(" + A + ")") = 1 + depth(A)，其中 A 是一个 有效括号字符串
例如：""、"()()"、"()(()())" 都是 有效括号字符串（嵌套深度分别为 0、1、2），而 ")(" 、"(()" 都不是 有效括号字符串 。

给你一个 有效括号字符串 s，返回该字符串的 s 嵌套深度 。

示例 1：

输入：s = "(1+(2*3)+((8)/4))+1"
输出：3
解释：数字 8 在嵌套的 3 层括号中。
示例 2：

输入：s = "(1)+((2))+(((3)))"
输出：3


5.排列组合（2题）
(1) *leetcode 面试题08.08.有重复字符串的排列组合

题目
有重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合。。

示例：

 输入：S = "qqe"
 输出：["eqq","qeq","qqe"]


(2) leetcode 77.组合

给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。

你可以按 任何顺序 返回答案。

 

示例 1：

输入：n = 4, k = 2
输出：
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
示例 2：

输入：n = 1, k = 1
输出：[[1]]



6.双指针（3题）
(1) *leetcode 674.最长连续递增序列

最长连续递增序列-题型1：
给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。
输入：nums = [1,3,5,4,7]
输出：3
解释：最长连续递增序列是 [1,3,5], 长度为3。


(2) NC17.最长回文子串

给定一个字符串 s,找到 s 中最长的回文子串。你可以假设s的最大长度为1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"


(3) NC28.最小覆盖子串

给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。

 

注意：

对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。
如果 s 中存在这样的子串，我们保证它是唯一的答案。
 

示例 1：

输入：s = "ADOBECODEBANC", t = "ABC"
输出："BANC"
解释：最小覆盖子串 "BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。
示例 2：

输入：s = "a", t = "a"
输出："a"
解释：整个字符串 s 是最小覆盖子串。
示例 3:

输入: s = "a", t = "aa"
输出: ""
解释: t 中两个字符 'a' 均应包含在 s 的子串中，
因此没有符合条件的子字符串，返回空字符串

8.数字反转

9.大小端判断

10. 去除重复字母

11.逆波兰式

c++11编程练习

多线程
多进程
线程池
阻塞队列
管道
定时器
共享内存
消息队列
信号
套接字

综合写一个程序
perf毫秒级别的性能优化 如何分析性能

系统性能分析标准

iostat vmstat sar

cpu   好(user% + sys% < 70%)  坏(user%+sys%=85%) 糟糕(user%+sys%>=90% )

内存 好(Swap in(si) = 0 Swap out(so) = 0)    坏(Per CPU with 10 page/s)
糟糕 (more swap in or swap out)

磁盘 好iowait% < 20% 坏iowait% = 35% 糟糕 iowait%>= 50%
https://www.cnblogs.com/bdqn2003/p/15715176.html

Linux 基础入门（新版）
Vim编辑器
Git 实战教程
TCP/IP 网络协议基础
Linux命令实例练习
操作系统原理与实践
Linux内核分析
Github 快速上手实战教程
正则表达式基础
高级 bash 脚本编程指南
Shell 脚本实现 Linux 系统监控
在Github Pages上部署自己的简历
基于 Python 的简易 Shell 实现
Linux系统监控实战
LAMP部署及配置
Git 与 GitHub 入门实践
GDB 简明教程
跟我一起来玩转Makefile
Linux多线程编程入门指南
动手实战学Docker
RabbitMQ 消息队列
C 语言实现贪吃蛇
Wireshark网络分析实战
Shell脚本实现打字游戏
C语言实现Linux pwd命令
C语言实现Linux touch命令
Linux 系统搭建及配置 DNS 服务器
C语言实现 FTP 服务器
Linux 防火墙技术
LVS 集群负载均衡实战
SDN软件定义网络动手实验
Linux系统安装及配置邮件服务器
C 语言实现聊天室软件
基于 Gitbook 制作电子书
由浅入深学网络
C语言实现 Linux 网络嗅探器
Linux桌面词典
构建 ELK(+Redis) 分布式 Nginx 日志分析系统
Linux下实现多线程模型
Wireshark抓包解析 OpenFlow 协议
Makefile基础教程
C 语言实现多线程排序
Linux系统安装git服务器
Ansible 基础教程
用 Flex 与 Yacc 开发一门编程语言
C语言实现文件类型统计程序
云原生监控系统 Prometheus
GTK开发视频播放器
C语言实现Linux ls命令
C 语言实现Linux cp 命令
Floodlight 入门教程
使用 Githook 实现团队 Coding Review 流程
C 语言实现Linux who命令
Kubernetes 入门与实战
Go 语言开发 Kubernetes 的命令行管理工具

https://zhuanlan.zhihu.com/p/73018848

C 语言实现贪吃蛇
C语言实现Linux pwd命令
C语言实现Linux touch命令
C语言实现 FTP 服务器
C 语言实现聊天室软件
C 语言实现多线程排序
C语言实现文件类型统计程序
C语言实现Linux ls命令
C 语言实现Linux cp 命令
C 语言实现Linux who命令
c++五子棋
内存监控工具
压缩工具
复杂数据结构
网络编程的并发模型
平衡二叉树
红黑树
栈队列
冒泡
插入
选择
快排

1.使用多线程，模拟龟兔赛跑的场景
2.编写一个有两个线程的程序，第一个线程用来计算2～100000之间的素数的个数，第二个线程用来计算100000～200000之间的素数的个数，最后输出结果
3.使用多线程实现多个文件同步复制功能，并在控制台显示复制的进度，进度以百分比表示。例如：把文件A复制到E盘某文件夹下，在控制台上显示“XXX文件已复制10%”，“XXX文件已复制20%”……“XXX文件已复制100%”，“XXX复制完成！”
4.设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。考虑到线程的安全性写出程序。
5. 假设有一个数组A，长度为N，其中每个元素都是一个整数。请编写一个程序，创建M个线程，每个线程计算数组A的一个子数组的和，并把结果累加到一个全局变量S中。当所有线程结束后，主线程输出S的值。
6.编写一个程序，创建一个子进程，并在子进程中执行一个命令，然后在父进程中等待子进程结束，并输出子进程的退出状态。

第三题（某培训机构的练习题）：

子线程循环 10 次，接着主线程循环 100 次，接着又回到子线程循环 10 次，接着再回到主线程又循环 100 次，如此循环50次，试写出代码。

第四题（迅雷笔试题）：

编写一个程序，开启3个线程，这3个线程的ID分别为A、B、C，每个线程将自己的ID在屏幕上打印10遍，要求输出结果必须按ABC的顺序显示；如：ABCABC….依次递推。

第五题（Google面试题）

有四个线程1、2、3、4。线程1的功能就是输出1，线程2的功能就是输出2，以此类推.........现在有四个文件ABCD。初始都为空。现要让四个文件呈如下格式：

A：1 2 3 4 1 2....

B：2 3 4 1 2 3....

C：3 4 1 2 3 4....

D：4 1 2 3 4 1....

请设计程序。

第六题

生产者消费者问题

这是一个非常经典的多线程题目，题目大意如下：有一个生产者在生产产品，这些产品将提供给若干个消费者去消费，为了使生产者和消费者能并发执行，在两者之间设置一个有多个缓冲区的缓冲池，生产者将它生产的产品放入一个缓冲区中，消费者可以从缓冲区中取走产品进行消费，所有生产者和消费者都是异步方式运行的，但它们必须保持同步，即不允许消费者到一个空的缓冲区中取产品，也不允许生产者向一个已经装满产品且尚未被取走的缓冲区中投放产品。
https://zhuanlan.zhihu.com/p/100925313


字符串常见算法
数组常见算法
递归常见算法
设计模式练习

benchmark性能测试
https://www.cnblogs.com/apocelipes/p/11067594.html

动态链接库

linux支持动态链接库的概念，允许程序在运行时，动态添加加载和卸载动态库。这有助于减少可执行文件的大小，共享代码，提高代码的可重用性

#include<dlfcn.h>
#include<iostream>

int main()
{
    void *handle = dlopen("libexample.so", RTLD_NOW);
    if (handle)
    {
        typedef void (ExampleFunction)();
        ExampleFunction function = (ExampleFunction)dlsym(handle, "exampleFunction");
        if (function)
        {
            function();
        }
        dlclose(handle);
    }
    
    return 0;
}


内存映射

将文件的一部分直接映射到进程的内存空间，使得文件可以像内存一样被访问。
mmap是linux提供的用于内存映射的系统调用

#include<sys/mman.h>
#include<fcntl.h>
#include<unistd.h>
#includ <iostream>

int main()
{
    int fd = open("example.txt", O_RDWR);
    off_t fileSize = lseek(fd, 0, SEEK_END);
    
    void *mappedMemory = mmap(NULL, fileSize, PORT_READ|PORT_WRITE, MAP_SHARED, fd, 0)
    
    close(fd);
    
    char *data = static_cast<char*>(mappedMemory);
    data[0] = 'H';
    data[1] = 'i';
    
    munmap(mappedMemory, fileSize);
    
}


定时器

#include <sys/time.h>
#include <csignal>
#include <iostream>

void timerHandle(int signum)
{
    cout << "Timer expitred! Signal number:" << signal << std::endl;
}

int main()
{
    struct itimeval timer;
    timer.it_value.tv_sec = 2;
    timer.it_value.tv_usec = 0;
    timer.it_interval.tv_sec = 1;
    timer.it_interval.tv_usec = 0;
    
    signal(SIGALRM, timerHandler);
    
    settimer(ITIMER_REAL, &timer, NULL);
    
    while(1)
    {
        
    }
}


内存泄露
性能测试
coredump
死锁 预防死锁的方法
六大设计原则:https://segmentfault.com/a/1190000040802991

接下来：
定时器
c++11 lamba 智能指针 仿函数 线程 锁
设计模式 单例 工厂 策略 代理 适配器 ----观察者 发布订阅
信号：
多线程处理信号
1.sigaction注册时机
sigaction不论在主线程中注册还是在子线程中注册，最终进程内的所有线程都调用sigaction注册的回调函数来处理。
sigaction注册不同信号，则不同信号对应着sigaction注册时的回调函数
sigaction注册相同信号，相同信号被注册多个回调函数，此时信号发来，执行的是最新的一个回调函数，等又有一个sigaction注册了之前的信号，则之前信号的回调函数会被更新会新的回调函数
2.哪个线程处理信号
如果主线程不阻塞某个信号，则优先处理信号的线程是主线程，且一个信号只会被一个线程所处理
当主线程阻塞了某个信号，则交由子线程处理，通过多次测试得出，优先处理信号的线程是pthread_ID较大的那个
虽然每个线程都有自己独立的signal mask，但是要注意子线程的mask是会从主线程继承而来的，如果主线程先阻塞了某个信号，再创建子线程，而子线程没有设置自己的signal mask ，则子线程也默认阻塞了该信号
                        
原文链接：https://blog.csdn.net/qq_42956653/article/details/120405296

套接字
https://blog.csdn.net/qq_41453285/article/details/107018098 测试muduo的性能
log日志
读写锁
https://zhuanlan.zhihu.com/p/374042984
抛异常
反射
红黑树
构造析构函数

性能编程书籍包括实践
c++并发编程书籍


stl使用场景


https://algo.itcharge.cn/09.Algorithm-Base/


《提高C++性能的编程技术》笔记
https://zhuanlan.zhihu.com/p/97046347

c++设计模式练习题
https://kamacoder.com/designpattern.php

以下需要常常练习
1.代码随想录
2.C++并发编程实战
3.提高C++性能的编程技术

四个基础项目
1.23个设计模式
2.MyTinySTL
3.NetServer
4.sylar
5.WebServer
6.MIT6.828





